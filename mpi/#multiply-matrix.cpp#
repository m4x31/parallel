#include <stdio.h>
#include <mpi.h>
#include <iostream>
using namespace std;

struct MatrixDimension {
  int height, width;

  MatrixDimension(int h, int w) {
    height = h;
    width = w;
  }
};


int **build_matrix(int height, int width) {

  int** matrix = new int*[height];

  for(int i = 0; i < height; i++) {
    matrix[i] = new int[width];

    for(int j = 0; j < width; j++) {
      matrix[i][j] = (i*height)+j;
    }
  }

  return matrix;
}

void log_matrix(int **matrix, int height, int width) {
  for (int i = 0; i < height; ++i) {
    for (int j = 0; j < width; ++j) {
      cout << matrix[i][j] << ' ';
    }
    cout << endl;
  }
  cout << endl;  
}

void run_primary(MatrixDimension a, ) {
    int** matrix = build_matrix(height, width);
    log_matrix(matrix, height, width);

}

void run_secondary(int height, int width) {

}



int main(int argc, char **argv)
{

  int widthA = stoi(argv[1]);
  int heightA = stoi(argv[2]);
  MatrixDimension matrixADimension = MatrixDimension(heightA, widthA);

  int widthB = stoi(argv[3]);
  int heightB = stoi(argv[4]);
  MatrixDimension matrixADimension = MatrixDimension(heightB, widthB);

  int widthResult = widthA;
  int heightResult = heightB;
  MatrixDimension matrixADimension = MatrixDimension(heightResult, widthResult);

  bool log = false;;

  if (argc > 5) {
    log = true;
  }
  
  
  int size, rank;
  MPI_Init(&argc, &argv);
  MPI_Comm_size(MPI_COMM_WORLD, &size);
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);

  if(rank == 0) {
    run_primary(height, width);
  }
  
  printf("SIZE = %d RANK = %d\n",size,rank);
  MPI_Finalize();
  return(0);
}
